name: Build and Release Electron App

on:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            arch: x64
            target: linux
            forge_arch: x64
            artifact_suffix: linux-x64
          - os: ubuntu-latest
            arch: arm64
            target: linux
            forge_arch: arm64
            artifact_suffix: linux-arm64
          # Windows
          - os: windows-latest
            arch: x64
            target: win32
            forge_arch: x64
            artifact_suffix: win-x64
          - os: windows-11-arm
            arch: arm64
            target: win32
            forge_arch: arm64
            artifact_suffix: win-arm64
          # macOS
          - os: macos-latest
            arch: x64
            target: darwin
            forge_arch: x64
            artifact_suffix: mac-x64
          - os: macos-latest
            arch: arm64
            target: darwin
            forge_arch: arm64
            artifact_suffix: mac-arm64

    runs-on: ${{ matrix.os }}
    outputs:
      artifact_name_prefix: ${{ github.event.repository.name }}-${{ steps.package_version.outputs.version || steps.package_version_win.outputs.version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Clean install dependencies (Unix)
        run: rm -rf node_modules out
        if: runner.os != 'Windows'
        shell: bash

      - name: Clean install dependencies (Windows)
        run: Remove-Item -Recurse -Force node_modules, out -ErrorAction Ignore
        if: runner.os == 'Windows'
        shell: pwsh

      - name: Install dependencies
        run: npm install

      - name: Build Electron app with Electron Forge
        run: npm run make -- --platform=${{ matrix.target }} --arch=${{ matrix.forge_arch }}
        env:
          MANIFEST_URL: ${{ secrets.MANIFEST_URL }}
          ASSET_BASE_URL: ${{ secrets.ASSET_BASE_URL }}
          PATCH_NOTES_BASE_URL: ${{ secrets.PATCH_NOTES_BASE_URL }}
          PATCH_NOTES_URL: ${{ secrets.PATCH_NOTES_URL }}
          VITE_PATCH_NOTES_BASE_URL: ${{ secrets.VITE_PATCH_NOTES_BASE_URL }}

        # # Signing for macOS and Windows
        # CSC_LINK: ${{ secrets.CSC_LINK }} # Base64 encoded .p12 or .pfx file
        # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }} # Password for the certificate

        # # Notarization for macOS (required for distribution outside App Store)
        # APPLE_ID: ${{ secrets.APPLE_ID }} # Your Apple Developer account email
        # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }} # App-specific password
        # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }} # Your Apple Developer Team ID

      - name: Get package version (Unix)
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash
        if: runner.os != 'Windows'

      - name: Get package version (Windows)
        id: package_version_win
        run: |
          $VERSION = node -p "require('./package.json').version"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$VERSION"
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ steps.package_version.outputs.version || steps.package_version_win.outputs.version }}-${{ matrix.artifact_suffix }}
          path: out/make/
          if-no-files-found: error

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      # actions: read

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          RELEASE_VERSION="${TAG_NAME#v}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          if [[ "$RELEASE_VERSION" == *-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: ${{ github.event.repository.name }} ${{ steps.get_version.outputs.release_version }}
          body:
            | # Puedes personalizar el cuerpo de la release aqu√≠ o usar body_path
            Release for version ${{ steps.get_version.outputs.release_version }}
            See CHANGELOG.md for details.
          draft: true
          prerelease: ${{ steps.get_version.outputs.is_prerelease }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Upload Release Assets (ZIPs)
        shell: bash
        run: |
          ARTIFACT_PARENT_DIR="downloaded-artifacts"
          echo "Searching for artifacts in $ARTIFACT_PARENT_DIR..."
          # Loop through each subdirectory in downloaded-artifacts (these are the individual artifact names)
          find "$ARTIFACT_PARENT_DIR" -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d $'\0' artifact_subdir; do
            echo "Processing artifact directory: $artifact_subdir"
            # Loop through each file within that specific artifact's subdirectory
            find "$artifact_subdir" -type f -print0 | while IFS= read -r -d $'\0' file_path; do
              asset_name=$(basename "$file_path")
              echo "Uploading $asset_name from $file_path"
              gh release upload "${{ steps.get_version.outputs.tag_name }}" "$file_path" --clobber
            done
          done
          echo "Finished uploading assets."
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
